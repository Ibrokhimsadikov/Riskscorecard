install.packages("echarts4r")
shiny::runApp('1')
runApp('1')
install.packages("shinyLP")
ry()
shiny::runApp('2')
HTML(paste0("<div class='jumbotron'>
<h1> ", header, "</h1>
<p>", content ,"</p>",
"<p><a class='btn btn-primary btn-lg' button id='tabBut'>", button_label, "</a></p>
</div>") )
runApp('1')
runApp('1')
runApp('1')
runApp('1')
runApp('1')
runApp('1')
shiny::runApp('1')
runApp('1')
runApp('1')
runApp('1')
library(tidyverse)
library(dplyr)
library(data.table)
library(tidyverse)
library(dplyr)
library(data.table)
data2 <- fread("./baseline_xgboost_1.csv")
data2 <- fread("./baseline_xgboost_1.csv")
data2%>%
mutate(Rate=`TARGET_predicted-probability of default 1`*100)
data2=data2%>%
mutate(Rate=`TARGET_predicted-probability of default 1`*100)
data2=data2%>%
mutate(Rate=`TARGET_predicted-probability of default 1`*100)
write.csv(data2, file = "Data.csv",row.names=FALSE)
runApp('1')
shiny::runApp('1')
library(tidyverse)
library(dplyr)
library(data.table)
data2 <- fread("./baseline_xgboost_1.csv")
data2=data2%>%
mutate(Rate=`TARGET_predicted-probability of default 1`*100)
write.csv(data2, file = "Data.csv",row.names=FALSE)
data2%>%
filter(SK_ID_CURR=='253759')
data2%>%
filter(SK_ID_CURR=='253759')%>%
select(Rate)
rate=data2%>%
filter(SK_ID_CURR=='253759')%>%
select(Rate)
shiny::runApp('1')
runApp('1')
runApp('1')
runApp('1')
runApp('1')
library(tidyverse)
library(dplyr)
library(data.table)
library(echarts4r)
data2 <- fread("./baseline_xgboost_1.csv")
data2=data2%>%
mutate(Rate=`TARGET_predicted-probability of default 1`*100)
write.csv(data2, file = "Data.csv",row.names=FALSE)
rate=data2%>%
filter(SK_ID_CURR=='253759')%>%
select(Rate)
e_charts() %>%
e_gauge(as.numeric(rate), "PERCENT")
e_charts() %>%
e_gauge(as.numeric(rate))
e_charts() %>%
e_gauge(as.numeric(rate), "PERCENT")
runApp('1')
e_charts() %>%
e_gauge(as.numeric(rate$Rate), "PERCENT")
e_charts() %>%
e_gauge(rate$Rate, "PERCENT")
runApp('1')
runApp('1')
devtools::install_github("jumpingrivers/gaugeR")
runApp('1')
runApp('1')
runApp('1')
runApp('1')
remotes::install_github("yihui/recharts")
install.packages("shiny")
shiny::runApp('1')
remotes::install_github("yihui/recharts")
runApp('1')
runApp('1')
runApp('1')
gg.gauge <- function(pos,breaks=c(0,30,70,100)) {
require(ggplot2)
get.poly <- function(a,b,r1=0.5,r2=1.0) {
th.start <- pi*(1-a/100)
th.end   <- pi*(1-b/100)
th       <- seq(th.start,th.end,length=100)
x        <- c(r1*cos(th),rev(r2*cos(th)))
y        <- c(r1*sin(th),rev(r2*sin(th)))
return(data.frame(x,y))
}
ggplot()+
geom_polygon(data=get.poly(breaks[1],breaks[2]),aes(x,y),fill="red")+
geom_polygon(data=get.poly(breaks[2],breaks[3]),aes(x,y),fill="gold")+
geom_polygon(data=get.poly(breaks[3],breaks[4]),aes(x,y),fill="forestgreen")+
geom_polygon(data=get.poly(pos-1,pos+1,0.2),aes(x,y))+
geom_text(data=as.data.frame(breaks), size=5, fontface="bold", vjust=0,
aes(x=1.1*cos(pi*(1-breaks/100)),y=1.1*sin(pi*(1-breaks/100)),label=paste0(breaks,"%")))+
annotate("text",x=0,y=0,label=pos,vjust=0,size=8,fontface="bold")+
coord_fixed()+
theme_bw()+
theme(axis.text=element_blank(),
axis.title=element_blank(),
axis.ticks=element_blank(),
panel.grid=element_blank(),
panel.border=element_blank())
}
gg.gauge(52,breaks=c(0,35,70,100))
runApp('1')
install.packages("ggplot2")
install.packages("ggplot2")
shiny::runApp('1')
runApp('1')
runApp('1')
runApp('1')
runApp('1')
library(tidyverse)
library(dplyr)
library(data.table)
library(echarts4r)
data2 <- fread("./baseline_xgboost_1.csv")
data2=data2%>%
mutate(Rate=`TARGET_predicted-probability of default 1`*100)
write.csv(data2, file = "Data.csv",row.names=FALSE)
rate=data2%>%
filter(SK_ID_CURR=='253759')%>%
select(Rate)
e_charts() %>%
e_gauge(rate$Rate, "PERCENT")
gg.gauge <- function(pos,breaks=c(0,30,70,100)) {
require(ggplot2)
get.poly <- function(a,b,r1=0.5,r2=1.0) {
th.start <- pi*(1-a/100)
th.end   <- pi*(1-b/100)
th       <- seq(th.start,th.end,length=100)
x        <- c(r1*cos(th),rev(r2*cos(th)))
y        <- c(r1*sin(th),rev(r2*sin(th)))
return(data.frame(x,y))
}
ggplot()+
geom_polygon(data=get.poly(breaks[1],breaks[2]),aes(x,y),fill="red")+
geom_polygon(data=get.poly(breaks[2],breaks[3]),aes(x,y),fill="gold")+
geom_polygon(data=get.poly(breaks[3],breaks[4]),aes(x,y),fill="forestgreen")+
geom_polygon(data=get.poly(pos-1,pos+1,0.2),aes(x,y))+
geom_text(data=as.data.frame(breaks), size=5, fontface="bold", vjust=0,
aes(x=1.1*cos(pi*(1-breaks/100)),y=1.1*sin(pi*(1-breaks/100)),label=paste0(breaks,"%")))+
annotate("text",x=0,y=0,label=pos,vjust=0,size=8,fontface="bold")+
coord_fixed()+
theme_bw()+
theme(axis.text=element_blank(),
axis.title=element_blank(),
axis.ticks=element_blank(),
panel.grid=element_blank(),
panel.border=element_blank())
}
gg.gauge(rate,breaks=c(0,35,70,100))
gg.gauge <- function(pos,breaks=c(0,30,70,100)) {
require(ggplot2)
get.poly <- function(a,b,r1=0.5,r2=1.0) {
th.start <- pi*(1-a/100)
th.end   <- pi*(1-b/100)
th       <- seq(th.start,th.end,length=100)
x        <- c(r1*cos(th),rev(r2*cos(th)))
y        <- c(r1*sin(th),rev(r2*sin(th)))
return(data.frame(x,y))
}
ggplot()+
geom_polygon(data=get.poly(breaks[1],breaks[2]),aes(x,y),fill="red")+
geom_polygon(data=get.poly(breaks[2],breaks[3]),aes(x,y),fill="gold")+
geom_polygon(data=get.poly(breaks[3],breaks[4]),aes(x,y),fill="forestgreen")+
geom_polygon(data=get.poly(pos-1,pos+1,0.2),aes(x,y))+
geom_text(data=as.data.frame(breaks), size=5, fontface="bold", vjust=0,
aes(x=1.1*cos(pi*(1-breaks/100)),y=1.1*sin(pi*(1-breaks/100)),label=paste0(breaks,"%")))+
annotate("text",x=0,y=0,label=pos,vjust=0,size=8,fontface="bold")+
coord_fixed()+
theme_bw()+
theme(axis.text=element_blank(),
axis.title=element_blank(),
axis.ticks=element_blank(),
panel.grid=element_blank(),
panel.border=element_blank())
}
gg.gauge(rate$Rate,breaks=c(0,35,70,100))
rate=data2%>%
filter(SK_ID_CURR=='253759')%>%
select(Rate)
rate
runApp('1')
gg.gauge <- function(pos,breaks=c(0,30,70,100)) {
require(ggplot2)
get.poly <- function(a,b,r1=0.5,r2=1.0) {
th.start <- pi*(1-a/100)
th.end   <- pi*(1-b/100)
th       <- seq(th.start,th.end,length=100)
x        <- c(r1*cos(th),rev(r2*cos(th)))
y        <- c(r1*sin(th),rev(r2*sin(th)))
return(data.frame(x,y))
}
ggplot()+
geom_polygon(data=get.poly(breaks[1],breaks[2]),aes(x,y),fill="red")+
geom_polygon(data=get.poly(breaks[2],breaks[3]),aes(x,y),fill="gold")+
geom_polygon(data=get.poly(breaks[3],breaks[4]),aes(x,y),fill="forestgreen")+
geom_polygon(data=get.poly(pos-1,pos+1,0.2),aes(x,y))+
geom_text(data=as.data.frame(breaks), size=5, fontface="bold", vjust=0,
aes(x=1.1*cos(pi*(1-breaks/100)),y=1.1*sin(pi*(1-breaks/100)),label=paste0(breaks,"%")))+
annotate("text",x=0,y=0,label=pos,vjust=0,size=8,fontface="bold")+
coord_fixed()+
theme_bw()+
theme(axis.text=element_blank(),
axis.title=element_blank(),
axis.ticks=element_blank(),
panel.grid=element_blank(),
panel.border=element_blank())
}
v=rate$Rate
gg.gauge(v,breaks=c(0,35,70,100))
runApp('1')
runApp('1')
runApp('1')
runApp('1')
runApp('1')
shiny::runApp('1')
runApp('1')
runApp('1')
runApp('1')
runApp('1')
library(tidyverse)
library(dplyr)
library(data.table)
library(echarts4r)
liquid <- data.frame(val = c(0.6, 0.5, 0.4))
liquid %>%
e_charts() %>%
e_liquid(val)
library(tidyverse)
library(dplyr)
library(data.table)
library(echarts4r)
data2 <- fread("./submission.csv")
View(data2)
data2=data2%>%
mutate(Rate=TARGET_predicted_probability_of_notdefault_0*100)
#write.csv(data2, file = "Datanodefault.csv",row.names=FALSE)
rate=data2%>%
filter(SK_ID_CURR=='253759')%>%
select(Rate)
rate
e_charts() %>%
e_gauge(rate$Rate, "PERCENT")
liquid <- data.frame(val = c(0.6, 0.5, 0.4))
liquid %>%
e_charts() %>%
e_liquid(val)
liquid <- data.frame(val = c(0.6, 0.5, 0.4))
liquid %>%
e_charts() %>%
e_liquid(val)
shiny::runApp('1')
runApp('1')
runApp('1')
runApp('1')
data2 <- fread("./submission.csv")
data2=data2%>%
mutate(Rate=TARGET_predicted_probability_of_notdefault_0*100)
#write.csv(data2, file = "Datanodefault.csv",row.names=FALSE)
mean(data2$Rate)
data2=data2%>%
mutate(Difference=Rate-57.70)
View(data2)
data2=data2%>%
mutate(Difference=Rate-57.70)
write.csv(data2, file = "Datanodefault.csv",row.names=FALSE)
runApp('1')
runApp('1')
shiny::runApp('1')
runApp('1')
runApp('1')
library(tidyverse)
library(dplyr)
library(data.table)
library(echarts4r)
library(tidyverse)
library(dplyr)
library(data.table)
library(echarts4r)
data2 <- fread("./submission.csv")
data2 <- fread("./submission.csv")
shiny::runApp('1')
runApp('1')
library(tidyverse)
library(dplyr)
library(data.table)
library(echarts4r)
library(tidyverse)
library(dplyr)
library(data.table)
library(echarts4r)
data2 <- fread("./submission.csv")
data2%>%
group_by(Actual)
data2%>%
group_by(Target_actual)
data2%>%
group_by(Target_Actual)
data2%>%
group_by(Target_Actual)%>%
summarise(Frequency = sum(Target_Actual))
data2%>%
group_by(Target_Actual)%>%
count(Target_Actual)
runApp('1')
runApp('1')
shiny::runApp('1')
runApp('1')
library(tidyverse)
library(dplyr)
library(data.table)
library(echarts4r)
data2=data2%>%
mutate(Rate=TARGET_predicted_probability_of_notdefault_0*100)
#write.csv(data2, file = "Datanodefault.csv",row.names=FALSE)
data2=data2%>%
mutate(Difference=Rate-57.70)
#write.csv(data2, file = "Datanodefault.csv",row.names=FALSE)
data= data2[1:15,]
lc = as.list(data$Rate)
names(lc) = data$SK_ID_CURR
#data= data2[1:15,]
#lc = as.list(data$Rate)
names(lc) = data$SK_ID_CURR
#data= data2[1:15,]
#lc = as.list(data$Rate)
names(lc) = data$SK_ID_CURR, data$Difference
#data= data2[1:15,]
#lc = as.list(data$Rate)
names(lc) = (data$SK_ID_CURR, data$Difference)
#data= data2[1:15,]
#lc = as.list(data$Rate)
names(lc) = (data$SK_ID_CURR data$Difference)
#data= data2[1:15,]
#lc = as.list(data$Rate)
names(lc) = data$SK_ID_CURR data$Difference
#data= data2[1:15,]
#lc = as.list(data$Rate)
names(lc) %>% data$SK_ID_CURR
#data= data2[1:15,]
lc = as.list(data$Rate)
names(lc) %>% data$SK_ID_CURR
runApp('1')
runApp('1')
x=5
if(x > 65){
"Non-negative number"
} else {
"Default"
}
x=5
if(x > 65){
"Non-negative number"
} else {
"Default"
}
runApp('1')
